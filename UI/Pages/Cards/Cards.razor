@page "/Cards"
@using global::UI.Service.Interfaces
@using global::UI.UI.Domain.Models
@using Microsoft.AspNetCore.Authorization
@inject ICurrentCardService _currentCardService
@inject IProductService _productService 
@attribute [Authorize]

<h3 class="text-center text-black">Корзина</h3>
<div class="flex-lg-wrap">
    @if (CurrentCard is not null)
    {
        <div class="card">
            <div class="card-header ">
                <div class="card-title">
                    <span>Корзина на сумму: @CurrentCard.TotalPrice.ToString() рублей</span>
                </div>
            </div>
            <div class="card-body">
                <ol class="card-group flex-column">
                @foreach (var product in CurrentCard.ProductsWithQuantity.Keys)
                    {
                        <div class=flex-lg-row>
                            <p class="card-text">@ProductNames[product]: @CurrentCard.ProductsWithQuantity[product].ToString() шт.</p>
                            <div id="wrapper">
                                <button class="plusminus" @onclick="() => 
                                    { if (CurrentCard.ProductsWithQuantity[product] > 1) 
                                        CurrentCard.ProductsWithQuantity[product]--; 
                                        StateHasChanged();}">
                                    -
                                </button>
                                <p class="num">@CurrentCard.ProductsWithQuantity[product].ToString()</p>
                                <button class="plusminus"  @onclick="() => { 
                                    if (ProductQuantity[product] >=CurrentCard.ProductsWithQuantity[product])
                                        CurrentCard.ProductsWithQuantity[product]++; 
                                        StateHasChanged();
                                    }">
                                    +
                                </button>
                            </div>
                        </div>
                        
                    }
                </ol>
            </div>
            <div class="card-footer">
                <button @onclick="async() => await SendCard()">Оплатить</button>
            </div>
        </div>
        @if (Payed is not null && Payed == false)
        {
            <span class="text-danger text-center">Ошибка при оплате</span>
        }
    }
    else
    {
        <p class="text-center text-info">Корзина пустая...</p>
    }
    @if (!IsOpened)
    {
        <button class="btn btn-info" @onclick="HideAndShow">Показать прошлые покупки</button>
    }
    else
    {
        <button class="btn btn-close btn-danger" @onclick="HideAndShow"></button>
        <CardsComponent></CardsComponent>
    }
</div>
<link href="css/SelectPage.css" rel="stylesheet"/>

@code {
    private Card? CurrentCard { get; set; }
    private bool IsOpened { get; set; } = false;
    private Dictionary<int, string>? ProductNames = new Dictionary<int, string>();
    private Dictionary<int, int>? ProductQuantity = new Dictionary<int, int>();
    private bool? Payed;
    
    protected override async void OnInitialized()
    {
        base.OnInitialized();
        CurrentCard = await _currentCardService.GetCurrentCardAsync();
        if (CurrentCard is not null)
        {
            await GetProductName();
            await GetProductQuantity();
        }
        StateHasChanged();
    }

    private async Task GetProductName()
    {
        foreach (var id in CurrentCard.ProductsWithQuantity.Keys)
        {
            var name = (await _productService.GetProductByIdAsync(id)).Name;
            ProductNames.Add(id, name);
        }
    }

    private async Task GetProductQuantity()
    {
        var response = await _currentCardService.GetProductQuantityAsync(CurrentCard.ShopId);
        if (response.IsSuccess)
            ProductQuantity = response.ProductQuantity;
    }

    private void HideAndShow()
    {
        IsOpened = !IsOpened;
        StateHasChanged();
    }

    private async Task SendCard()
    {
        if (await _currentCardService.IsCartPay(CurrentCard.TotalPrice))
        {
            await _currentCardService.AddCardAsync(CurrentCard);
            ProductNames = new Dictionary<int, string>();
            StateHasChanged();    
        }
        Payed = false;
    }

    private async Task GetProductsQuantity()
    {
        if (CurrentCard is not null)
        {
            
        }
    }

}