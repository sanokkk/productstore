@page "/"
@using Blazored.LocalStorage
@using global::UI.Providers
@using Microsoft.AspNetCore.Http
@inject NavigationManager _manager;
@inject ILocalStorageService _localStorage;
@inject AuthenticationStateProvider _authenticationState;

<PageTitle>Index</PageTitle>

<div class="page">
    <div class="title">
        <h1>Hello, User!</h1>
    </div>
    <div class="text-body">
        @if (auth is not null && auth == true)
        {
            <p class="text-info text-center text-black">Используйте боковое меню для навигации</p>
        }
        else
        {
            <p class="text-center text-black-50">Для входа в аккаунт/регистрации перейдите в соответсвующий раздел в боковом меню</p>
            <p class="text-center text-black">Данное приложение разработано на микросервисной архитектуре и платформе .Net</p>
        }
    </div>
</div>


@*Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?"/>

<button @onclick="redirect">All is ok</button>

<button @onclick="reg">Rigister</button>

<button @onclick="Logout">Logout</button>

<button @onclick="fetching">Fetching</button>

<p>@auth</p>*@

@code {
    private bool? auth;
    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if ((await _authenticationState.GetAuthenticationStateAsync()).User.Identity.IsAuthenticated)
            auth = true;
        else
            auth = false;
        StateHasChanged();
    }

    private void redirect()
    {
        _manager.NavigateTo("/fetchpage");
    }

    private void reg()
    {
        _manager.NavigateTo("/Register");
    }

    private void fetching()
    {
        _manager.NavigateTo("/fetchPage");
    }

    private async void Logout()
    {
        await _localStorage.RemoveItemAsync("jwt-token");
        await _localStorage.RemoveItemAsync("refresh-token");
        (_authenticationState as AuthProvider).NotifyAuthState();
        _manager.NavigateTo("/login");
    }

}