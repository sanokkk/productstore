@page "/login"
@using global::UI.UI.Domain.Dto_S
@using global::UI.Service.Interfaces
@using Blazored.LocalStorage
@using global::UI.Providers
@using global::UI.Service.Responses
@inject IAuthService _service;
@inject NavigationManager _manager;
@inject ILocalStorageService _localStorage;
@inject AuthenticationStateProvider _authenticationState;

<link type="text/css" />
<div class="form">
    <div class="title">Вход в аккаунт</div>
    <div class="subtitle">Введите свои данные</div>
    <div class="input-container ic1">
        <input @bind="model.Username" id="login" class="input" type="text" placeholder=" "/>
        <div class="cut"></div>
        <label for="login" class="placeholder">Login</label>
    </div>
    <div class="input-container ic2">
        <input @bind="model.Password" id="password" class="input" type="text" placeholder=" "/>
        <div class="cut"></div>
        <label for="password" class="placeholder">Password</label>
    </div>
    
    
    <button @onclick="UserLogin" type="text" class="submit">submit</button>
    <div style="margin-top: 20px;display: flex; justify-content: center;">
            <span class="text-info" >Нет аккаунта? <button class="btn btn-info" @onclick="reg">Зарегистрироваться</button></span>
    </div>
</div>

@if (!string.IsNullOrEmpty(validate))
{
    <p class="alert-warning text-center">@validate</p>
}

@code {

    private LoginDto model;
    private string validate;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        model = new LoginDto();
    }

    private async void UserLogin()
    {
        var user = model;
        var response = await _service.LoginAsync(user);

        if (!response.Success)
        {
            validate = "Incorrect data!";
        }
        else
        {
            var loginResponse = response as LoginResponse;
            await _localStorage.SetItemAsync("jwt-token",loginResponse.Message);
            await _localStorage.SetItemAsync("refresh-token", loginResponse.RefreshToken);
            (_authenticationState as AuthProvider).NotifyAuthState();
            _manager.NavigateTo("/");
        }
    }
    private void reg()
    {
        _manager.NavigateTo("/Register");
    }
    
    

}